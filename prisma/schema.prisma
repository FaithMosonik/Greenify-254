// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Individual {
  individualId    String    @id @default(uuid())
  userName        String?
  firstName       String
  lastName        String
  email           String @unique
  password        String
  phoneNumber     String?
  profileimageUrl String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  emailVerified   Boolean   @default(false)
  Comment         Comment[]
  Post            Post[]
  Like            Like[]
  Session         Session[]
  EmailVerificationCode EmailVerificationCode[]
  PasswordResetToken     PasswordResetToken[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  individual Individual @relation(fields: [userId], references: [individualId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  userId    String
  email     String
  code      String
  expiresAt DateTime
  individual  Individual     @relation(fields: [userId], references: [individualId])

  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token      String
  expiresAt DateTime
  individual  Individual     @relation(fields: [userId], references: [individualId])

  @@index([userId])
}

model WasteFacility {
  wasteFacilityId String   @id @default(uuid())
  name            String
  email           String
  district        String
  county          String
  longitude       String
  latitude        String
  location        String
  address         String
  wasteType       String
  facilityType    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CompanyAccount {
  companyAccountId String   @id @default(uuid())
  name             String
  email            String
  password         String
  bio              String
  profileImageUrl  String
  location         String
  phoneNumber      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Post             Post[]
}

model DonationOrganisation {
  donationOrganisationId String   @id @default(uuid())
  name                   String
  email                  String
  phoneNumber            String
  location               String
  bio                    String
  profileImageUrl        String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  Post                   Post[]
}

model Post {
  postId           String   @id @default(uuid())
  title            String
  content          String
  imageUrl         String
  category         String
  eventDate        DateTime?
  eventLocation    String?
  eventTime        String?
  productPrice     Float?
  websiteLink      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  authorId         String? // Assuming this is for individuals
  companyAccountId String? // New field for company accounts

  author         Individual?     @relation(fields: [authorId], references: [individualId])
  companyAccount CompanyAccount? @relation(fields: [companyAccountId], references: [companyAccountId])

  DonationOrganisation   DonationOrganisation? @relation(fields: [donationOrganisationId], references: [donationOrganisationId])
  donationOrganisationId String?
  Comment                Comment[]
  Like                   Like[]
}

model Comment {
  commentId String     @id @default(uuid())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  postId    String
  authorId  String
  author    Individual @relation(fields: [authorId], references: [individualId])
  post      Post       @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Like {
  likeId    String     @id @default(uuid())
  postId    String
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    Individual @relation(fields: [authorId], references: [individualId])
  post      Post       @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Blog {
  title       String  @id @default(uuid())
  description String
  image       String
  author      String?
  link        String?
  date        String
}
